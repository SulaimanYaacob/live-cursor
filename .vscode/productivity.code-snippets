{
	"consoleLog": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cons",
		"body": [
			"console.log({$1});",
			"$2"
		],
		"description": "Log output to console"
	},
	"mantine-notification": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "noti",
		"body": [
			"showNotification({",
			"\ttitle: 'title',",
			"\tmessage: `message`,",
			"\t...${1|warning,error,loading,success|}Props,",
			"});"
		],
		"description": "Log output to console"
	},
	"trpcRoute": {
		"scope": "typescript",
		"prefix": "trpcRouter",
		"description": "Create a router for TRPC",
		"body": [
			"${1:routerName}: ${2|publicProcedure,protectedProcedure,profileProtectedProcedure,teacherProtectedProcedure,adminProcedure|}",
			"\t.input(z.object({$5})${4|.optional()|})",
			"\t.${3|query,mutation|}(async({ctx,input}) => {",
			"\t\ttry{",
			"\t\t\t",
			"\t\t\treturn{}",
			"\t\t}catch(error:any){",
			"\t\t\tthrow new TRPCError({",
			"\t\t\t\tcode: error.code || 'INTERNAL_SERVER_ERROR',",
			"\t\t\t\tmessage: error.message,",
			"\t\t\t});",
			"\t\t}",
			"\t}),",
		]
	},
	"newTrpcRouter": {
		"scope": "typescript",
		"prefix": "newtrpcroute",
		"description": "Create a router for TRPC",
		"body": [
			"import {TRPCError} from '@trpc/server'",
			"import {z} from 'zod'",
			"import { protectedProcedure, publicProcedure, adminProcedure, teacherProtectedProcedure, router } from '../trpc'",
			"",
			"export const ${1:routerName} = router({",
			"\t${2:routeName}: ${3|publicProcedure,protectedProcedure,profileProtectedProcedure,adminProcedure,teacherProtectedProcedure|}",
			"\t\t.input(z.object({}).optional())",
			"\t\t.${4|query,mutation|}(async({ctx,input}) => {",
			"\t\t\ttry{",
			"\t\t\t\t$5",
			"\t\t\t\treturn{}",
			"\t\t\t}catch(error:any){",
			"\t\t\t\tthrow new TRPCError({",
			"\t\t\t\t\tcode: error.code || 'INTERNAL_SERVER_ERROR',",
			"\t\t\t\t\tmessage: error.message,",
			"\t\t\t\t});",
			"\t\t\t}",
			"\t\t}),",
			"\t}),",
		]
	},
	"trpcInferInput": {
		"scope": "typescriptreact,javascriptreact,javascript,typescript",
		"prefix": "trpc.infer",
		"description": "Infer trpc router input and output",
		"body": [
			"import type { RouterOutputs, RouterInputs } from 'utils/trpc';",
			"",
			"type $1Output = RouterOutputs[$2][$3];",
			"type $1Input = RouterInputs[$2][$3];"
		]
	},
	"hook": {
		"scope": "typescriptreact,javascriptreact",
		"prefix": "hook.basic",
		"description": "Basic Custom Hook",
		"body": [
			"type OptionsProps = {",
			"\t${3|text: string|}",
			"}",
			"",
			"const ${1:${2:$TM_FILENAME_BASE}} = (opts?: OptionsProps) => {", // option 2 works
			"\treturn {}",
			"};",
			"",
			"export default $1;" // uses option 2
		]
	},
	"trpcMutationHook": {
		"scope": "typescriptreact,javascriptreact",
		"prefix": "hooks.mutation",
		"description": "Mutation Hook with TRPC and Mantine Notification",
		"body": [
			"import { useForm } from '@mantine/form';",
			"import { showNotification, updateNotification } from '@mantine/notifications';",
			"import {errorProps,loadingProps,successProps} from 'utils/defaultPropsAndOptions/notificationProps';",
			"import type { RouterInputs, RouterOutputs} from 'utils/trpc';",
			"import { trpc} from 'utils/trpc';",
			"",
			"type Input = RouterInputs['dummyRouter']['dummyMutation'];",
			"type Output = RouterOutputs['dummyRouter']['dummyMutation'];",
			"",
			"type OptionsProps = {",
			"\tonSuccess?: (data: Output) => void;",
			"\tonError?: () => void;",
			"\tdisableNotification?: boolean;",
			"}",
			"",
			"const ${1:${2:$TM_FILENAME_BASE}} = (opts?: OptionsProps) => {",
			"\tconst { mutate } = trpc.dummyRouter.dummyMutation.useMutation({",
			"\tonMutate:(data) => {",
			"\t\tif (!opts?.disableNotification)",
			"\t\t\tshowNotification({",
			"\t\t\t\tid: ${5|'some-id'|},",
			"\t\t\t\ttitle: '',",
			"\t\t\t\tmessage: '',",
			"\t\t\t\t...loadingProps",
			"\t\t\t})",
			"\t},",
			"\tonSuccess:(data) => {",
			"\t\tupdateNotification({",
			"\t\t\tid: ${5|'some-id'|},",
			"\t\t\ttitle: '',",
			"\t\t\tmessage: '',",
			"\t\t\t...successProps",
			"\t\t})",
			"\t\topts?.onSuccess?.(data);",
			"\t},",
			"\tonError:({message}) => {",
			"\t\tupdateNotification({",
			"\t\t\tid: ${5|'some-id'|},",
			"\t\t\ttitle: '',",
			"\t\t\tmessage: `Oh no, \\${message}`,",
			"\t\t\t...errorProps",
			"\t\t})",
			"\t\topts?.onError?.();",
			"\t},",
			"\t})",
			"",
			"const { getInputProps, onSubmit, values, setFieldValue } = useForm<Input>({initialValues: undefined, validate:{}})",
			"",
			"const submit = () => onSubmit((data) => mutate(data)) ",
			"",
			"\treturn {mutate, getInputProps, values, setFieldValue, submit}",
			"};",
			"",
			"export default $1;" // uses option 2
		]
	},
	"mantineModal": {
		"scope": "typescriptreact,javascriptreact",
		"prefix": "modal",
		"description": "Create Basic Mantine Modal",
		"body": [
			"import { Button, Modal, Stack, Title, Select, TextInput } from '@mantine/core';",
			"import { useState } from 'react';",
			"",
			"type Props = {",
			"\topened: boolean",
			"\tonClose: () => void",
			"\tonUpdateSuccess?: () => void",
			"}",
			"",
			"const ${1:${2:$TM_FILENAME_BASE}} = ({opened, onClose, onUpdateSuccess}:Props) => {",
			"\t",
			"\t const [state, setState] = useState()",
			"\t",
			"\treturn(",
			"\t\t<Modal opened={opened} onClose={onClose} size='md' title={",
			"\t\t\t<Title order={5}>${3|Title|}</Title>",
			"\t\t}>",
			"\t\t\t<Stack>",
			"\t\t\t\t$4",
			"\t\t\t\t<Select label='' data={[]}/>",
			"\t\t\t\t<TextInput label='' />",
			"\t\t\t\t",
			"\t\t\t\t<Button>Submit</Button>",
			"\t\t\t</Stack>",
			"\t\t</Modal>",
			"\t)",
			"\t",
			"\t",
			"}",
			"",
			"export default $1;"
		]
	},
}